class Solution {
    int idx;
    Map<Integer,Integer> map;//O(n)
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // preprocessing - the in-order input and store it in the HashMap for Reducing the linear lookup to identify the index of the root 
        map = new HashMap<>(); 
        for(int i=0; i< inorder.length ; i++){
            map.put(inorder[i],i);
        }
        //recursive func to build the tree by breaking it into(left subtree,right subtree)
        idx = 0;
        return helper(preorder,0,inorder.length-1); 
    }

    private TreeNode helper(int[] preorder, int start ,int end){
        // base case
        if(start > end ) return null;
        // logic 
        int rootVal = preorder[idx];
        idx++;
            TreeNode root = new TreeNode(rootVal);
            root.left = helper(preorder, start, map.get(root.val) -1);
            root.right = helper(preorder, map.get(root.val)+1 , end);   
        
        return root;
    }
}